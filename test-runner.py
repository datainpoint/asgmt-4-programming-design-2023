import unittest
import importlib

class TestAssignmentFour(unittest.TestCase):
    def test_01_square_args(self):
        self.assertEqual(asgmt.square_args(0), [0])
        self.assertEqual(asgmt.square_args(0, 1), [0, 1])
        self.assertEqual(asgmt.square_args(0, 1, 2), [0, 1, 4])
        self.assertEqual(asgmt.square_args(0, 1, 2, 3), [0, 1, 4, 9])
        self.assertEqual(asgmt.square_args(0, 1, 2, 3, 4), [0, 1, 4, 9, 16])
        self.assertEqual(asgmt.square_args(0, 1, 2, 3, 4, 5), [0, 1, 4, 9, 16, 25])
        self.assertEqual(asgmt.square_args(0, 1, 2, 3, 4, 5, 6), [0, 1, 4, 9, 16, 25, 36])
    def test_02_abs_args(self):
        self.assertEqual(asgmt.abs_args(0), [0])
        self.assertEqual(asgmt.abs_args(0, -1), [0, 1])
        self.assertEqual(asgmt.abs_args(0, -1, -2), [0, 1, 2])
        self.assertEqual(asgmt.abs_args(0, -1, -2, -3), [0, 1, 2, 3])
        self.assertEqual(asgmt.abs_args(0, -1, -2, -3, -4), [0, 1, 2, 3, 4])
        self.assertEqual(asgmt.abs_args(0, -1, -2, -3, -4, 1), [0, 1, 2, 3, 4, 1])
        self.assertEqual(asgmt.abs_args(0, -1, -2, -3, -4, 1, 2), [0, 1, 2, 3, 4, 1, 2])
    def test_03_uppercase_keys_from_kwargs(self):
        self.assertEqual(asgmt.uppercase_keys_from_kwargs(twn='Taiwan'), ['TWN'])
        self.assertEqual(asgmt.uppercase_keys_from_kwargs(twn='Taiwan', jpn='Japan'), ['TWN', 'JPN'])
        self.assertEqual(asgmt.uppercase_keys_from_kwargs(twn='Taiwan', jpn='Japan', ltu="Lithuania"), ['TWN', 'JPN', 'LTU'])
        self.assertEqual(asgmt.uppercase_keys_from_kwargs(twn='Taiwan', jpn='Japan', ltu="Lithuania", svn='Slovenia'), ['TWN', 'JPN', 'LTU', 'SVN'])
        self.assertEqual(asgmt.uppercase_keys_from_kwargs(twn='Taiwan', jpn='Japan', ltu="Lithuania", svn='Slovenia', usa='United States of America'), ['TWN', 'JPN', 'LTU', 'SVN', 'USA'])
    def test_04_square_negatives_from_args(self):
        self.assertEqual(asgmt.square_negatives_from_args(-3, -2, -1, 0, 1, 2, 3), [9, 4, 1])
        self.assertEqual(asgmt.square_negatives_from_args(-3, -2, -1, 0, 1, 2, 3, '4', '5'), [9, 4, 1])
        self.assertEqual(asgmt.square_negatives_from_args(-3, -2, -1, False, True, 2, 3, '4', '5'), [9, 4, 1])
        self.assertEqual(asgmt.square_negatives_from_args(-3, -2, -1), [9, 4, 1])
        self.assertEqual(asgmt.square_negatives_from_args(-3, -2, -1, 2, 3, '4', '5'), [9, 4, 1])
    def test_05_reverse_keys_values_from_kwargs(self):
        self.assertEqual(asgmt.reverse_keys_values_from_kwargs(twn='Taiwan'), {'Taiwan': 'twn'})
        self.assertEqual(asgmt.reverse_keys_values_from_kwargs(twn='Taiwan', jpn='Japan'), {'Taiwan': 'twn', 'Japan': 'jpn'})
        self.assertEqual(asgmt.reverse_keys_values_from_kwargs(twn='Taiwan', jpn='Japan', ltu="Lithuania"), {'Taiwan': 'twn', 'Japan': 'jpn', 'Lithuania': 'ltu'})
        self.assertEqual(asgmt.reverse_keys_values_from_kwargs(twn='Taiwan', jpn='Japan', ltu="Lithuania", svn='Slovenia'), {'Taiwan': 'twn', 'Japan': 'jpn', 'Lithuania': 'ltu', 'Slovenia': 'svn'})
        self.assertEqual(asgmt.reverse_keys_values_from_kwargs(twn='Taiwan', jpn='Japan', ltu="Lithuania", svn='Slovenia', usa="United States of America"), {'Taiwan': 'twn', 'Japan': 'jpn', 'Lithuania': 'ltu', 'Slovenia': 'svn', 'United States of America': 'usa'})
    def test_06_Pet(self):
        dog = asgmt.Pet('Dog', 'Bark')
        self.assertEqual(dog.species, 'Dog')
        self.assertEqual(dog.make_sound(), 'Bark')
        kitty = asgmt.Pet('Cat', 'Meow')
        self.assertEqual(kitty.species, 'Cat')
        self.assertEqual(kitty.make_sound(), 'Meow')
    def test_07_Hogwarts(self):
        hogwarts = asgmt.Hogwarts()
        self.assertEqual(hogwarts.location, 'Scotland')
        self.assertEqual(hogwarts.founders, ['Godric Gryffindor', 'Salazar Slytherin', 'Rowena Ravenclaw', 'Helga Hufflepuff'])
        self.assertEqual(hogwarts.houses, ['Gryffindor', 'Slytherin', 'Ravenclaw', 'Hufflepuff'])
    def test_08_StrCase(self):
        luke = asgmt.StrCase('Luke Skywalker')
        self.assertEqual(luke.upper_case(), 'LUKE SKYWALKER')
        self.assertEqual(luke.lower_case(), 'luke skywalker')
        self.assertEqual(luke.swap_case(), 'lUKE sKYWALKER')
        anakin = asgmt.StrCase('Anakin Skywalker')
        self.assertEqual(anakin.upper_case(), 'ANAKIN SKYWALKER')
        self.assertEqual(anakin.lower_case(), 'anakin skywalker')
        self.assertEqual(anakin.swap_case(), 'aNAKIN sKYWALKER')
    def test_09_MethodCalculator(self):
        method_calculator = asgmt.MethodCalculator(5, 6)
        self.assertEqual(method_calculator.add(), 11)
        self.assertEqual(method_calculator.subtract(), -1)
        self.assertEqual(method_calculator.multiply(), 30)
        self.assertGreaterEqual(method_calculator.divide(), 0.8)
        method_calculator = asgmt.MethodCalculator(10, 10)
        self.assertEqual(method_calculator.add(), 20)
        self.assertEqual(method_calculator.subtract(), 0)
        self.assertEqual(method_calculator.multiply(), 100)
        self.assertGreaterEqual(method_calculator.divide(), 1)
    def test_10_SymbolicCalculator(self):
        symbolic_calculator = asgmt.SymbolicCalculator(5, 6)
        self.assertGreaterEqual(symbolic_calculator.calculate('+'), 11)
        self.assertGreaterEqual(symbolic_calculator.calculate('-'), -1)
        self.assertGreaterEqual(symbolic_calculator.calculate('*'), 30)
        self.assertGreaterEqual(symbolic_calculator.calculate('/'), 0.8)
        symbolic_calculator = asgmt.SymbolicCalculator(10, 10)
        self.assertGreaterEqual(symbolic_calculator.calculate('+'), 20)
        self.assertGreaterEqual(symbolic_calculator.calculate('-'), 0)
        self.assertGreaterEqual(symbolic_calculator.calculate('*'), 100)
        self.assertGreaterEqual(symbolic_calculator.calculate('/'), 1)

asgmt = importlib.import_module("asgmt-four")
suite = unittest.TestLoader().loadTestsFromTestCase(TestAssignmentFour)
runner = unittest.TextTestRunner(verbosity=2)
test_results = runner.run(suite)
number_of_failures = len(test_results.failures)
number_of_errors = len(test_results.errors)
number_of_test_runs = test_results.testsRun
number_of_successes = number_of_test_runs - (number_of_failures + number_of_errors)
print("You've got {} successes among {} questions.".format(number_of_successes, number_of_test_runs))